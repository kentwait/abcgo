package abcgo

import (
	"math/rand"
)

// Generator is a data generating function that outputs data based on
// a set of input parameters.
type Generator func(...float64) []float64

// RejectionSampler implements the ABC rejection algorithm.
// In this method, parameters are generated by sampling a parameter space as
// uniformly. Proposed parameters are accepted or rejected based on a
// similarity metric computed between the observed data and the simulated
// data generated using the parameters.
func RejectionSampler(y []float64, tolerance float64, generateParams Proposers, generateDataF Generator, acceptParams Filter) (acceptedParams []float64) {
	var params, x []float64
	// sample new parameters from parameter generator
	params = generateParams.Propose()

	// generate new data x based on parameters
	x = generateDataF(params...)

	if acceptParams(y, x, tolerance) == false {
		// store theta if within tolerance
		acceptedParams = nil
	}
	acceptedParams = params

	return
}

// RejectionSamplerN performs ABC rejection sampling over n number of rounds.
func RejectionSamplerN(n int64, y []float64, tolerance float64,
	generateParams Proposers, generateDataF Generator, acceptParamsF Filter) (acceptedParams [][]float64) {
	// n is number of trials

	for t := int64(0); t < n; t++ {
		p := RejectionSampler(y, tolerance, generateParams, generateDataF, acceptParamsF)
		acceptedParams = append(acceptedParams, p)
	}
	return
}

type MCMCProposer func(...[]float64) []float64

// MCMCSampler implements the ABC Markov chain Monte Carlo algorithm.
// In this method, new parameters are proposed by random walk exploring the
// neighborhood of the last accepted parameter.
func MCMCSampler(n int64, y, params []float64, tolerance float64,
	generateParams Proposers, generateData Generator, acceptParams Filter) (acceptedParams, acceptedX [][]float64) {
	var x, newParams []float64
	var h float64
	for i := int64(0); i < n; i++ {
		for {
			// propose new parameters from parameter generator based on the
			// previous accepted parameter
			newParams = generateParams.Propose()

			// generate new data x based on parameters
			x = generateData(params...)

			// Test whether generated data is close enough to the observed
			// data. If not, stay at previous parameters and try again
			if acceptParams(y, x, tolerance) == false {
				continue
			}
			// Calculate acceptance probability h
			// TODO
			h = float64(0)

			// Accept new parameters with probability h.
			// Otherwise, stay at previous parameters and try again
			if h <= rand.Float64() {
				acceptedParams = append(acceptedParams, newParams)
				acceptedX = append(acceptedX, x)

				params = newParams
			}
		}
	}
	return
}
